type Timestamp = int;
type Principal = principal;
type EventId = nat;
type Event = 
 record {
   calendarId: CalendarId;
   color: text;
   description: text;
   endTime: Timestamp;
   id: EventId;
   startTime: Timestamp;
   title: text;
 };
type CalendarId = nat;
type Calendar = 
 record {
   color: text;
   id: CalendarId;
   name: text;
   owner: Principal;
 };
service : {
  create_calendar_internal: (owner: principal, name: text, color: text) ->
   (Calendar);
  create_event: (calendarId: CalendarId, title: text, description: text,
   startTime: Timestamp, endTime: Timestamp, color: text) -> (Event);
  delete_event: (eventId: EventId) -> (bool);
  get_event: (eventId: EventId) -> (opt Event);
  get_events_for_range: (calendarId: CalendarId, queryStartTime: Timestamp,
   queryEndTime: Timestamp) -> (vec Event);
  update_event: (eventId: EventId, newTitle: opt text, newDescription:
   opt text, newStartTime: opt Timestamp, newEndTime: opt Timestamp,
   newColor: opt text) -> (opt Event);
}
